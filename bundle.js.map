{"version":3,"sources":["webpack:///webpack/bootstrap de54ee3511768726b421","webpack:///./lib/main.js","webpack:///./lib/sudoku.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE,qCAAqC;AACrC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA,KAAK;AACL;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA,KAAK;AACL;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA,KAAK;AACL;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,8BAA8B,GAAG,GAAG,EAAE;AACtC;AACA;AACA,kDAAkD,GAAG;AACrD;AACA;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB,aAAa;AACtC,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxHA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,SAAS;AACrD,mBAAmB,EAAE;AACrB,8DAA8D,YAAY;AAC1E,cAAc,EAAE,GAAG,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;;;AAGA;AACA;AACA,OAAO;AACP;AACA,uDAAuD,YAAY;AACnE;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap de54ee3511768726b421","import SudokuBoard from './sudoku';\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=> {\n  setupSudoku();\n  let selectedCell = $(\".sudoku-cell\").first();\n  let selectedButton = $(\".number-button\").first();\n  let selectedId = parseInt(selectedCell.attr('id'));\n  selectedCell.addClass(\"selected\");\n  $(\".number-button\").on(\"click\", (e) => {\n    selectedButton.removeClass(\"selected\");\n    selectedButton = $(e.currentTarget);\n    selectedButton.addClass(\"selected\");\n    let cell = board.cells[parseInt(selectedCell.attr(\"id\"))];\n    let num = parseInt(selectedButton.attr(\"val\"));\n    cell.valueVisible = true;\n    cell.possibles = [false,false,false,false,false,false,false,false,false];\n    cell.currentValue = num;\n    board.render();\n  });\n\n  $(\".sudoku-cell\").on(\"click\", (e) => {\n    selectedCell.removeClass(\"selected\");\n    selectedCell = $(e.currentTarget);\n    selectedId = parseInt(selectedCell.attr('id'));\n    selectedCell.addClass(\"selected\");\n  });\n  document.addEventListener(\"keydown\", (e) => {\n    let num = parseInt(e.keyCode) - 48;\n    let cell = board.cells[parseInt(selectedCell.attr(\"id\"))];\n    if (num >= 1 && num <= 9) {\n      if (e.shiftKey) {\n        cell.value = 0;\n        cell.valueVisible = false;\n        cell.possibles[num - 1] = !cell.possibles[num - 1];\n        // for (let i = 0, len = cell.possibles.length; i < len; i++) {\n        //   if (cell.possibles[i]) {return;}\n        // }\n        // cell.valueVisible = true;\n      } else {\n        cell.valueVisible = true;\n        cell.possibles = [false,false,false,false,false,false,false,false,false];\n        cell.currentValue = num;\n      }\n      board.render();\n    } else if (e.keyCode === 37 && selectedId % 9 !== 0) {\n      selectedCell.removeClass(\"selected\");\n      selectedCell = $(`#${selectedId - 1}`);\n      selectedId = parseInt(selectedCell.attr('id'));\n      selectedCell.addClass(\"selected\");\n    } else if (e.keyCode === 39 && selectedId % 9 !== 8) {\n      selectedCell.removeClass(\"selected\");\n      selectedCell = $(`#${selectedId + 1}`);\n      selectedId = parseInt(selectedCell.attr('id'));\n      selectedCell.addClass(\"selected\");\n    } else if (e.keyCode === 38 && Math.floor(selectedId / 9) !== 0) {\n      selectedCell.removeClass(\"selected\");\n      selectedCell = $(`#${selectedId - 9}`);\n      selectedId = parseInt(selectedCell.attr('id'));\n      selectedCell.addClass(\"selected\");\n    } else if (e.keyCode === 40 && Math.floor(selectedId / 9) !== 8) {\n      selectedCell.removeClass(\"selected\");\n      selectedCell = $(`#${selectedId + 9}`);\n      selectedId = parseInt(selectedCell.attr('id'));\n      selectedCell.addClass(\"selected\");\n    } else if (e.keyCode === 8 || e.keyCode === 32 || e.keyCode === 48) {\n      cell.currentValue = 0;\n      if (cell.valueVisible) {\n        cell.valueVisible = false;\n      } else {\n        cell.possibles = [false,false,false,false,false,false,false,false,false];\n      }\n      board.render();\n    }\n  });\n\n  let board = new SudokuBoard();\n});\n\nconst setupSudoku = () => {\n  $(\"#board\").children().remove();\n  let grid = $(document.createElement(\"div\"));\n  grid.attr(\"id\", \"grid\");\n  for (let i = 0; i < 9; i++) {\n    let box = $(document.createElement(\"div\"));\n    for (let j = 0; j < 9; j++) {\n      let cell = $(document.createElement(\"div\"));\n      let possibilities = $(document.createElement(\"div\"));\n      possibilities.addClass(\"sudoku-cell-possibilities\");\n      for (let k = 0; k < 9; k++) {\n        let possible = $(document.createElement(\"div\"));\n        possible.addClass(\"sudoku-cell-possibility\");\n        let id = (Math.floor(i / 3) * 27) + ((i % 3) * 3) + (Math.floor(j / 3) * 9) + (j % 3);\n        possible.attr('id',`${id}-${k}`);\n        possibilities.append(possible);\n      }\n      // possibilities.attr('id',`possibilities-${id}`);\n      cell.append(possibilities);\n      cell.addClass(\"sudoku-cell\");\n      let id = (Math.floor(i / 3) * 27) + ((i % 3) * 3) + (Math.floor(j / 3) * 9) + (j % 3);\n      cell.attr('id',`${id}`);\n      box.append(cell);\n    }\n    box.addClass(\"sudoku-box\");\n    grid.append(box);\n  }\n  $(\"#board\").append(grid);\n  let numberPanel = $(document.createElement(\"div\"));\n  numberPanel.attr(\"id\", \"number-panel\");\n  let number;\n  for (let i = 0; i < 10; i++) {\n    number = $(document.createElement(\"div\"));\n    number.addClass(\"number-button\");\n    number.attr(\"val\",`${(i + 1) % 10}`);\n    number.text(`${ (i + 1) % 10}`);\n    if ( i === 9) {\n      number.text(``);\n    }\n    numberPanel.append(number);\n  }\n  $(\"#board\").append(numberPanel);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","class SudokuBoard {\n  constructor() {\n    this.boxes = [];\n    this.cells = [];\n    for (let i = 0; i < 9; i++) {\n      this.boxes.push(new SudokuBox(i));\n    }\n    let boxIdx, sudokuCell;\n    for (let i = 0; i < 81; i++) {\n      sudokuCell = new SudokuCell(0, i, false);\n      this.cells.push(sudokuCell);\n      boxIdx = (Math.floor(i / 27) * 3) + Math.floor((i % 9) / 3);\n      sudokuCell.box = this.boxes[boxIdx];\n      this.boxes[boxIdx].cells.push(sudokuCell);\n    }\n    this.render = this.render.bind(this);\n    this.populate = this.populate.bind(this);\n    this.populateBoard = this.populateBoard.bind(this);\n\n\n    this.populateBoard();\n    this.render();\n  }\n\n  render() {\n    let cell, children, possibilities;\n    for (let i = 0, len = this.cells.length; i < len; i++) {\n      cell = $(`#${i}`);\n      for (let j = 0, posLen = this.cells[i].possibles.length; j < posLen; j++) {\n        $(`#${i}-${j}`).text(this.cells[i].possibles[j] ? j + 1 : \"\");\n      }\n      children = cell.children();\n      cell.text(this.cells[i].currentValue !== 0 && this.cells[i].valueVisible ? this.cells[i].currentValue : \"\");\n      cell.append(children);\n      if (this.cells[i].valueVisible) {\n        cell.children().removeClass(\"visible\");\n        cell.children().addClass(\"hidden\");\n      } else {\n        cell.children().removeClass(\"hidden\");\n        cell.children().addClass(\"visible\");\n      }\n    }\n  }\n\n  populateBoard() {\n    for (let i = 0, len = this.cells.length; i < len; i++) {\n      this.cells[i].possibles = [0,0,0,0,0,0,0,0,0];\n    }\n    while (true) {\n      if (this.populate(0)){\n        break;\n      }\n    }\n    for (let i = 0, len = this.cells.length; i < len; i++) {\n      this.cells[i].possibles = [false,false,false,false,false,false,false,false,false];\n    }\n  }\n\n  populate(cellIdx) {\n    if (cellIdx >= 81) {\n      return true;\n    }\n    let indii = new Array(9);\n    let cell = this.cells[cellIdx];\n    for (let i = 0, len = indii.length; i < len; i++) {\n      indii[i] = i;\n    }\n    let pos1, pos2, temp;\n    for (let i = 0; i < 100; i++) {\n      pos1 = Math.floor(Math.random() * 9);\n      pos2 = Math.floor(Math.random() * 9);\n      temp = indii[pos1];\n      indii[pos1] = indii[pos2];\n      indii[pos2] = temp;\n    }\n    for (let i = 0, len = cell.possibles.length; i < len; i++) {\n      let posIdx = indii[i];\n      if (cell.possibles[posIdx]) {\n        continue;\n      }\n      cell.currentValue = posIdx + 1;\n\n      // change neigbhors possibles\n      for (let j = 0, boxLen = cell.box.cells.length; j < boxLen; j++) {\n        cell.box.cells[j].possibles[posIdx] += 1;\n      }\n      let startRow = Math.floor(cellIdx / 9) * 9;\n      for (let j = 0; j < 9; j++) {\n        // debugger\n        this.cells[startRow + j].possibles[posIdx] += 1;\n      }\n      let startCol = Math.floor(cellIdx % 9);\n      for (let j = 0; j < 9; j++) {\n        this.cells[(9 * j) + startCol].possibles[posIdx] += 1;\n      }\n\n\n      if (this.populate(cellIdx + 1)) {\n        return true;\n      } else {\n        // change neighbors possibles\n        for (let j = 0, boxLen = cell.box.cells.length; j < boxLen; j++) {\n          cell.box.cells[j].possibles[posIdx] -= 1;\n        }\n        for (let j = 0; j < 9; j++) {\n          this.cells[startRow + j].possibles[posIdx] -= 1;\n        }\n        for (let j = 0; j < 9; j++) {\n          this.cells[(9 * j) + startCol].possibles[posIdx] -= 1;\n        }\n        this.currentValue = 0;\n      }\n    }\n    return false;\n  }\n}\n\nclass SudokuBox {\n  constructor(idx) {\n    this.idx = idx;\n    this.cells = [];\n    this.box = null;\n  }\n}\n\nclass SudokuCell {\n  constructor(value = 0, idx, isGiven) {\n    this.currentValue = value;\n    this.valueVisible = true;\n    this.idx = idx;\n    this.isGiven = isGiven;\n    this.inConflict = false;\n    this.possibles = [false,false,false,false,false,false,false,false,false];\n  }\n\n  togglePossible(idx) {\n    this.possibles[idx] = !this.possibles[idx];\n  }\n}\n\n\nexport default SudokuBoard;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/sudoku.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}